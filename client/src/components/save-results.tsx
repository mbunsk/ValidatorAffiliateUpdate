import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface SaveResultsProps {
  validationData: {
    idea: string;
    targetCustomer: string;
    problemSolved: string;
    feedback: string;
  };
}

export default function SaveResults({ validationData }: SaveResultsProps) {
  const [generating, setGenerating] = useState(false);
  const { toast } = useToast();

  const generatePDF = async () => {
    setGenerating(true);
    try {
      // Create a clean text version of the feedback
      const cleanFeedback = validationData.feedback.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, '');
      
      // Create PDF content
      const pdfContent = `
STARTUP IDEA VALIDATION REPORT
Generated by ValidatorAI.com
Date: ${new Date().toLocaleDateString()}

===============================================

IDEA: ${validationData.idea}

TARGET CUSTOMER: ${validationData.targetCustomer}

PROBLEM SOLVED: ${validationData.problemSolved}

===============================================
VAL'S ANALYSIS
===============================================

${cleanFeedback}

===============================================
Generated by ValidatorAI.com - Your AI Startup Mentor
For more validations and free landing page mockups, visit ValidatorAI.com
      `;

      // Create and download the file
      const blob = new Blob([pdfContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `startup-validation-${validationData.idea.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast({
        title: "Results Downloaded!",
        description: "Your validation report has been saved to your computer",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate report",
        variant: "destructive",
      });
    } finally {
      setGenerating(false);
    }
  };

  return (
    <Card className="shadow-lg border-2 border-blue-500/20 bg-gradient-to-r from-blue-500/10 to-green-500/10">
      <CardContent className="p-6">
        <h4 className="text-lg font-bold text-blue-600 mb-4 flex items-center gap-2">
          ðŸ’¾ Save Your Results
        </h4>
        <p className="text-sm text-foreground/80 mb-4">
          Download your complete validation report to keep and share with others!
        </p>
        
        <div className="flex justify-center">
          <Button
            onClick={generatePDF}
            disabled={generating}
            size="lg"
            className="bg-blue-600 hover:bg-blue-700"
          >
            <Download className="w-4 h-4 mr-2" />
            {generating ? "Generating Report..." : "Download Report"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}