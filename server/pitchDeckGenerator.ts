import { jsPDF } from 'jspdf';

export interface PitchDeckData {
  validationData: {
    idea: string;
    targetCustomer: string;
    problemSolved: string;
    feedback: string;
  };
  customerInsights: Array<{
    persona: {
      name: string;
      role: string;
      background: string;
      painPoints: string[];
      priceWillingness: string;
    };
    conversations: Array<{
      question: string;
      response: string;
    }>;
  }>;
  simulationData: Array<{
    month: number;
    title: string;
    challenges: string[];
    wins: string[];
    users: number;
    keyDecisions: string[];
  }>;
  landingPageContent?: string;
}

export class PitchDeckGenerator {
  private doc: jsPDF;
  private currentY: number = 40;
  private pageHeight: number = 297; // A4 height in mm
  private margin: number = 20;
  
  constructor() {
    this.doc = new jsPDF();
  }

  private addPage() {
    this.doc.addPage();
    this.currentY = 40;
  }

  private checkPageBreak(requiredHeight: number = 20) {
    if (this.currentY + requiredHeight > this.pageHeight - this.margin) {
      this.addPage();
    }
  }

  private addTitle(text: string, fontSize: number = 24) {
    this.checkPageBreak(30);
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(text, this.margin, this.currentY);
    this.currentY += 20;
  }

  private addSubtitle(text: string, fontSize: number = 16) {
    this.checkPageBreak(15);
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(text, this.margin, this.currentY);
    this.currentY += 12;
  }

  private addText(text: string, fontSize: number = 12, maxWidth: number = 170) {
    this.checkPageBreak(10);
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'normal');
    
    // Split text into lines that fit
    const lines = this.doc.splitTextToSize(text, maxWidth);
    for (const line of lines) {
      this.checkPageBreak(8);
      this.doc.text(line, this.margin, this.currentY);
      this.currentY += 6;
    }
    this.currentY += 4;
  }

  private addBulletPoint(text: string, fontSize: number = 11) {
    this.checkPageBreak(10);
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'normal');
    
    const lines = this.doc.splitTextToSize(text, 160);
    this.doc.text("â€¢", this.margin + 5, this.currentY);
    
    for (let i = 0; i < lines.length; i++) {
      this.checkPageBreak(8);
      this.doc.text(lines[i], this.margin + 12, this.currentY);
      this.currentY += 6;
    }
    this.currentY += 2;
  }

  private addSection(title: string, content: string[]) {
    this.addTitle(title, 18);
    content.forEach(item => {
      if (item.trim()) {
        this.addBulletPoint(item);
      }
    });
    this.currentY += 10;
  }

  private parseFeedbackScore(feedback: string): number {
    const scoreMatch = feedback.match(/(\d+)\/100/);
    return scoreMatch ? parseInt(scoreMatch[1]) : 75;
  }

  private extractFeedbackSection(feedback: string, sectionTitle: string): string[] {
    const regex = new RegExp(`<h3>${sectionTitle}</h3>[\\s\\S]*?(?=<h3>|$)`, 'i');
    const match = feedback.match(regex);
    if (!match) return [];
    
    // Extract text content, remove HTML tags
    const content = match[0].replace(/<[^>]*>/g, '').replace(/\n+/g, ' ').trim();
    const lines = content.split('\n').filter(line => line.trim() && !line.includes(sectionTitle));
    return lines.length > 0 ? lines : [content.replace(sectionTitle, '').trim()];
  }

  generatePitchDeck(data: PitchDeckData): Buffer {
    // Cover Slide
    this.currentY = 100;
    this.addTitle(data.validationData.idea, 28);
    this.addSubtitle("Startup Pitch Deck", 16);
    this.currentY += 20;
    this.addText(`Target Customer: ${data.validationData.targetCustomer}`, 14);
    this.addText(`Problem Solved: ${data.validationData.problemSolved}`, 14);
    this.currentY += 40;
    this.addText("Generated by ValidatorAI - Startup Simulation Platform", 10);

    // Problem Slide
    this.addPage();
    this.addTitle("The Problem");
    this.addText(data.validationData.problemSolved, 14);
    
    const problemInsights = this.extractFeedbackSection(data.validationData.feedback, "Market Reality Check");
    if (problemInsights.length > 0) {
      this.addSubtitle("Market Context:");
      problemInsights.forEach(insight => this.addBulletPoint(insight));
    }

    // Solution Slide
    this.addPage();
    this.addTitle("Our Solution");
    this.addText(data.validationData.idea, 14);
    
    const uniqueValue = this.extractFeedbackSection(data.validationData.feedback, "What Makes This Special");
    if (uniqueValue.length > 0) {
      this.addSubtitle("What Makes Us Special:");
      uniqueValue.forEach(value => this.addBulletPoint(value));
    }

    // Market Validation Slide
    this.addPage();
    this.addTitle("Market Validation");
    const score = this.parseFeedbackScore(data.validationData.feedback);
    this.addSubtitle(`Validation Score: ${score}/100`);
    
    const fitAlignment = this.extractFeedbackSection(data.validationData.feedback, "Overall Fit Score");
    if (fitAlignment.length > 0) {
      fitAlignment.forEach(insight => this.addText(insight, 12));
    }

    // Customer Research Slide
    this.addPage();
    this.addTitle("Customer Research");
    this.addSubtitle(`Interviewed ${data.customerInsights.length} Target Customers:`);
    
    data.customerInsights.forEach((insight, index) => {
      this.addSubtitle(`${insight.persona.name} - ${insight.persona.role}`, 14);
      this.addText(insight.persona.background, 11);
      this.addText(`Pain Points: ${insight.persona.painPoints.join(", ")}`, 11);
      this.addText(`Price Willingness: ${insight.persona.priceWillingness}`, 11);
      this.currentY += 8;
    });

    // Key Customer Insights
    this.addPage();
    this.addTitle("Customer Feedback Highlights");
    
    data.customerInsights.forEach((insight, index) => {
      if (insight.conversations && insight.conversations.length > 0) {
        this.addSubtitle(`${insight.persona.name}:`, 14);
        // Show most relevant conversation
        const keyConversation = insight.conversations[0];
        this.addText(`Q: ${keyConversation.question}`, 11);
        this.addText(`A: ${keyConversation.response}`, 11);
        this.currentY += 8;
      }
    });

    // Business Model & Traction
    this.addPage();
    this.addTitle("Business Model & Traction");
    
    if (data.simulationData && data.simulationData.length > 0) {
      this.addSubtitle("6-Month Projection:");
      
      const lastMonth = data.simulationData[data.simulationData.length - 1];
      this.addBulletPoint(`Projected Users: ${lastMonth.users?.toLocaleString()} users by Month 6`);
      
      // Key milestones from simulation
      this.addSubtitle("Key Milestones:");
      data.simulationData.slice(0, 3).forEach(month => {
        if (month.wins && month.wins.length > 0) {
          this.addBulletPoint(`Month ${month.month}: ${month.wins[0]}`);
        }
      });
    }

    // Revenue Model
    this.addPage();
    this.addTitle("Revenue Model");
    
    // Extract pricing from customer insights
    const pricePoints = data.customerInsights.map(c => c.persona.priceWillingness).filter(Boolean);
    if (pricePoints.length > 0) {
      this.addSubtitle("Customer Price Research:");
      pricePoints.forEach(price => this.addBulletPoint(price));
    }
    
    // Extract monetization strategy from feedback
    const monetizationInsights = this.extractFeedbackSection(data.validationData.feedback, "Revenue Potential");
    if (monetizationInsights.length > 0) {
      this.addSubtitle("Strategy:");
      monetizationInsights.forEach(insight => this.addBulletPoint(insight));
    }

    // Challenges & Risks
    this.addPage();
    this.addTitle("Challenges & Risk Mitigation");
    
    if (data.simulationData && data.simulationData.length > 0) {
      this.addSubtitle("Identified Challenges:");
      const allChallenges = data.simulationData.flatMap(month => month.challenges || []);
      const uniqueChallenges = Array.from(new Set(allChallenges)).slice(0, 5);
      uniqueChallenges.forEach(challenge => this.addBulletPoint(challenge));
    }

    // Next Steps
    this.addPage();
    this.addTitle("Next Steps & Milestones");
    
    const nextSteps = this.extractFeedbackSection(data.validationData.feedback, "Next Steps");
    if (nextSteps.length > 0) {
      nextSteps.forEach(step => this.addBulletPoint(step));
    }
    
    if (data.simulationData && data.simulationData.length > 0) {
      this.addSubtitle("Immediate Actions:");
      const firstMonth = data.simulationData[0];
      if (firstMonth.keyDecisions) {
        firstMonth.keyDecisions.forEach(decision => this.addBulletPoint(decision));
      }
    }

    // Contact & Team
    this.addPage();
    this.addTitle("Thank You");
    this.currentY += 20;
    this.addText("This pitch deck was generated based on AI-powered validation", 12);
    this.addText("and customer research through ValidatorAI platform.", 12);
    this.currentY += 20;
    this.addSubtitle("Ready to validate your startup idea?");
    this.addText("Visit ValidatorAI.com for free idea validation", 12);

    return Buffer.from(this.doc.output('arraybuffer'));
  }

  generateBusinessReport(data: PitchDeckData): Buffer {
    // Business Report - More detailed version
    this.addTitle("Startup Validation Report", 24);
    this.addSubtitle(data.validationData.idea, 18);
    this.currentY += 10;

    // Executive Summary
    this.addSection("Executive Summary", [
      `Business Concept: ${data.validationData.idea}`,
      `Target Market: ${data.validationData.targetCustomer}`,
      `Problem Addressed: ${data.validationData.problemSolved}`,
      `Validation Score: ${this.parseFeedbackScore(data.validationData.feedback)}/100`
    ]);

    // Market Analysis
    this.addPage();
    this.addTitle("Market Analysis");
    const marketInsights = this.extractFeedbackSection(data.validationData.feedback, "Market Reality Check");
    marketInsights.forEach(insight => this.addText(insight, 12));

    // Customer Research Details
    this.addPage();
    this.addTitle("Customer Research Findings");
    
    data.customerInsights.forEach((insight, index) => {
      this.addSubtitle(`Customer Profile ${index + 1}: ${insight.persona.name}`);
      this.addText(`Role: ${insight.persona.role}`, 12);
      this.addText(`Background: ${insight.persona.background}`, 12);
      this.addText(`Key Pain Points:`, 12);
      insight.persona.painPoints.forEach(pain => this.addBulletPoint(pain));
      this.addText(`Price Sensitivity: ${insight.persona.priceWillingness}`, 12);
      this.currentY += 10;
    });

    // Detailed Simulation Results
    if (data.simulationData && data.simulationData.length > 0) {
      this.addPage();
      this.addTitle("6-Month Business Simulation");
      
      data.simulationData.forEach(month => {
        this.addSubtitle(`Month ${month.month}: ${month.title}`);
        this.addText(`Users: ${month.users?.toLocaleString()}`, 12);
        
        if (month.wins && month.wins.length > 0) {
          this.addText("Key Wins:", 12);
          month.wins.forEach(win => this.addBulletPoint(win));
        }
        
        if (month.challenges && month.challenges.length > 0) {
          this.addText("Challenges:", 12);
          month.challenges.forEach(challenge => this.addBulletPoint(challenge));
        }
        
        this.currentY += 8;
      });
    }

    return Buffer.from(this.doc.output('arraybuffer'));
  }
}