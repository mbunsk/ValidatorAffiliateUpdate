const { jsPDF } = require('jspdf');

interface SimulationMonth {
  month: number;
  title: string;
  users: number;
  revenue?: number;
  wins: string[];
  challenges: string[];
}

export function createSimulationPDF(ideaName: string, simulationData: SimulationMonth[]): Buffer {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(18);
  doc.text('6-Month Startup Simulation', 105, 20, { align: 'center' });
  doc.setFontSize(14);
  doc.text(ideaName, 105, 30, { align: 'center' });
  
  // Line separator
  doc.line(20, 35, 190, 35);
  
  let yPos = 45;
  
  simulationData.forEach((month, index) => {
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
    
    // Month header
    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text(`Month ${month.month}: ${month.title}`, 20, yPos);
    yPos += 8;
    
    // Stats
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text(`Users: ${month.users?.toLocaleString() || 'N/A'}`, 20, yPos);
    if (month.revenue) {
      doc.text(`Revenue: $${month.revenue.toLocaleString()}`, 100, yPos);
    }
    yPos += 8;
    
    // Wins
    if (month.wins?.length > 0) {
      doc.setFont(undefined, 'bold');
      doc.text('Key Wins:', 20, yPos);
      yPos += 5;
      doc.setFont(undefined, 'normal');
      month.wins.forEach(win => {
        doc.text(`• ${win}`, 25, yPos);
        yPos += 5;
      });
      yPos += 2;
    }
    
    // Challenges
    if (month.challenges?.length > 0) {
      doc.setFont(undefined, 'bold');
      doc.text('Challenges:', 20, yPos);
      yPos += 5;
      doc.setFont(undefined, 'normal');
      month.challenges.forEach(challenge => {
        doc.text(`• ${challenge}`, 25, yPos);
        yPos += 5;
      });
    }
    
    // Add spacing between months
    if (index < simulationData.length - 1) {
      yPos += 5;
      doc.line(20, yPos, 190, yPos);
      yPos += 10;
    }
  });
  
  // Footer
  if (yPos > 270) {
    doc.addPage();
    yPos = 20;
  }
  doc.setFontSize(8);
  doc.text('Generated by ValidatorAI Platform', 105, yPos + 10, { align: 'center' });
  
  return Buffer.from(doc.output('arraybuffer'));
}