import PDFDocument from 'pdfkit';

interface SimulationMonth {
  month: number;
  title: string;
  users: number;
  revenue?: number;
  wins: string[];
  challenges: string[];
}

export function createSimulationPDF(ideaName: string, simulationData: SimulationMonth[]): Buffer {
  const doc = new PDFDocument({ margin: 50 });
  const buffers: Buffer[] = [];
  
  doc.on('data', buffers.push.bind(buffers));
  
  // Header
  doc.fontSize(20).font('Helvetica-Bold').text('6-Month Startup Simulation', { align: 'center' });
  doc.moveDown(0.5);
  doc.fontSize(16).font('Helvetica').text(ideaName, { align: 'center' });
  doc.moveDown(1);
  
  // Add line separator
  doc.moveTo(50, doc.y).lineTo(545, doc.y).stroke();
  doc.moveDown(1);
  
  simulationData.forEach((month, index) => {
    // Month header
    doc.fontSize(14).font('Helvetica-Bold');
    doc.text(`Month ${month.month}: ${month.title}`, { continued: false });
    doc.moveDown(0.3);
    
    // Stats
    doc.fontSize(11).font('Helvetica');
    doc.text(`Users: ${month.users?.toLocaleString() || 'N/A'}`, { continued: true });
    if (month.revenue) {
      doc.text(`    Revenue: $${month.revenue.toLocaleString()}`, { continued: false });
    } else {
      doc.text('', { continued: false });
    }
    doc.moveDown(0.3);
    
    // Wins
    if (month.wins?.length > 0) {
      doc.fontSize(10).font('Helvetica-Bold').text('Key Wins:', { continued: false });
      month.wins.forEach(win => {
        doc.fontSize(10).font('Helvetica').text(`• ${win}`, { indent: 20 });
      });
      doc.moveDown(0.2);
    }
    
    // Challenges
    if (month.challenges?.length > 0) {
      doc.fontSize(10).font('Helvetica-Bold').text('Challenges:', { continued: false });
      month.challenges.forEach(challenge => {
        doc.fontSize(10).font('Helvetica').text(`• ${challenge}`, { indent: 20 });
      });
    }
    
    // Add spacing between months
    if (index < simulationData.length - 1) {
      doc.moveDown(0.8);
      doc.moveTo(50, doc.y).lineTo(545, doc.y).strokeOpacity(0.3).stroke().strokeOpacity(1);
      doc.moveDown(0.8);
    }
  });
  
  // Footer
  doc.moveDown(2);
  doc.fontSize(8).font('Helvetica').text('Generated by ValidatorAI Platform', { align: 'center' });
  
  doc.end();
  
  return new Promise<Buffer>((resolve) => {
    doc.on('end', () => {
      resolve(Buffer.concat(buffers));
    });
  }) as any;
}